version: '3'

services:
  traefik:
    image: traefik:v3.1
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.toml:/etc/traefik/traefik.toml

  db:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_DB=${DATABASE_NAME}
    ports:
      - '${DATABASE_PORT}:5432'
    volumes:
      - ./db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${DATABASE_NAME}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s  

  api:
    build: src/api
    restart: always
    depends_on: 
      - db
    environment:
      - FLASK_ENV=${FLASK_ENV}
      - FLASK_APP=app.py
      - SQLALCHEMY_DATABASE_URI=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@db:${DATABASE_PORT}/${DATABASE_NAME}
    labels:
      - "traefik.http.services.api.loadbalancer.server.port=5000"
      - "traefik.http.routers.api.rule=Host(`template.localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web"

  front:
    build:
      context: .
      dockerfile: dockerfile.prod
    restart: always
    tty: true
    stdin_open: true
    labels:
      - "traefik.http.services.front.loadbalancer.server.port=3000"
      - "traefik.http.routers.front.rule=Host(`template.localhost`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.front.entrypoints=web"
